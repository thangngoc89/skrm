{"version":3,"sources":["ulid.js","../node_modules/ulid/dist/index.esm.js","exam_form/PDT_Maugiao.js","RecordInputMaugiao.js","RecordNewMaugiao.js"],"names":["ulid__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","ulid","monotonicFactory","createError","message","err","Error","source","d","__webpack_exports__","ENCODING","ENCODING_LEN","length","TIME_MAX","Math","pow","TIME_LEN","RANDOM_LEN","replaceCharAt","str","index","char","substr","randomChar","prng","rand","floor","charAt","encodeTime","now","len","isNaN","Number","isInteger","mod","encodeRandom","detectPrng","allowInsecure","arguments","undefined","root","window","browserCrypto","crypto","msCrypto","buffer","Uint8Array","getRandomValues","nodeCrypto","randomBytes","readUInt8","e","console","error","random","currPrng","lastTime","lastRandom","seedTime","Date","incrementedRandom","done","charIndex","maxCharIndex","indexOf","incrementBase32","newRandom","PDT_MaugiaoForm","_ref","_ref$initialValues","initialValues","maugiao_initialValues","onSave","react_default","a","createElement","formik_esm","onSubmit","values","_ref2","setSubmitting","then","validationSchema","maugiao_yupSchema","validateOnBlur","validateOnChange","_ref3","handleSubmit","isSubmitting","setFieldValue","setFieldTouched","isValidating","errors","PDT_SchemaRender_bs","layout","maugiao_layout","FormikNotify","ids","maugiao_ids","MountPortal","id","components","justifyContent","direction","alignItems","FormikAutosave","render","_ref4","type","value","Button","primary","label","size","className","onClick","disabled","color","margin","left","hoVaTen","PDT_Maugiao","_ref5","Heading","level","textAlign","Text","PDT_Maugiao_PDT_MaugiaoForm","RecordInputMaugiao","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","doc","setDoc","Box","fill","style","WebkitOverflowScrolling","pad","overflow","exam_form_PDT_Maugiao","tabValue","objectSpread","complete","newDoc","defineProperty","promiseRetry","retry","number","db","put","catch","response","status","_rev","rev","Notify","log","r","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_RecordInputMaugiao__WEBPACK_IMPORTED_MODULE_1__","_ulid__WEBPACK_IMPORTED_MODULE_2__","_db__WEBPACK_IMPORTED_MODULE_3__","RecordNewMaugiao","key","_id","kind","MAUGIAO"],"mappings":"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","file":"static/js/7.d32ee53e.chunk.js","sourcesContent":["import { monotonicFactory } from 'ulid'\n\nconst ulid = monotonicFactory()\n\nexport default ulid;\n","function createError(message) {\n  var err = new Error(message);\n  err.source = \"ulid\";\n  return err;\n} // These values should NEVER change. If\n// they do, we're no longer making ulids!\n\n\nvar ENCODING = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\"; // Crockford's Base32\n\nvar ENCODING_LEN = ENCODING.length;\nvar TIME_MAX = Math.pow(2, 48) - 1;\nvar TIME_LEN = 10;\nvar RANDOM_LEN = 16;\n\nfunction replaceCharAt(str, index, char) {\n  if (index > str.length - 1) {\n    return str;\n  }\n\n  return str.substr(0, index) + char + str.substr(index + 1);\n}\n\nfunction incrementBase32(str) {\n  var done = undefined;\n  var index = str.length;\n  var char = void 0;\n  var charIndex = void 0;\n  var maxCharIndex = ENCODING_LEN - 1;\n\n  while (!done && index-- >= 0) {\n    char = str[index];\n    charIndex = ENCODING.indexOf(char);\n\n    if (charIndex === -1) {\n      throw createError(\"incorrectly encoded string\");\n    }\n\n    if (charIndex === maxCharIndex) {\n      str = replaceCharAt(str, index, ENCODING[0]);\n      continue;\n    }\n\n    done = replaceCharAt(str, index, ENCODING[charIndex + 1]);\n  }\n\n  if (typeof done === \"string\") {\n    return done;\n  }\n\n  throw createError(\"cannot increment this string\");\n}\n\nfunction randomChar(prng) {\n  var rand = Math.floor(prng() * ENCODING_LEN);\n\n  if (rand === ENCODING_LEN) {\n    rand = ENCODING_LEN - 1;\n  }\n\n  return ENCODING.charAt(rand);\n}\n\nfunction encodeTime(now, len) {\n  if (isNaN(now)) {\n    throw new Error(now + \" must be a number\");\n  }\n\n  if (now > TIME_MAX) {\n    throw createError(\"cannot encode time greater than \" + TIME_MAX);\n  }\n\n  if (now < 0) {\n    throw createError(\"time must be positive\");\n  }\n\n  if (Number.isInteger(now) === false) {\n    throw createError(\"time must be an integer\");\n  }\n\n  var mod = void 0;\n  var str = \"\";\n\n  for (; len > 0; len--) {\n    mod = now % ENCODING_LEN;\n    str = ENCODING.charAt(mod) + str;\n    now = (now - mod) / ENCODING_LEN;\n  }\n\n  return str;\n}\n\nfunction encodeRandom(len, prng) {\n  var str = \"\";\n\n  for (; len > 0; len--) {\n    str = randomChar(prng) + str;\n  }\n\n  return str;\n}\n\nfunction decodeTime(id) {\n  if (id.length !== TIME_LEN + RANDOM_LEN) {\n    throw createError(\"malformed ulid\");\n  }\n\n  var time = id.substr(0, TIME_LEN).split(\"\").reverse().reduce(function (carry, char, index) {\n    var encodingIndex = ENCODING.indexOf(char);\n\n    if (encodingIndex === -1) {\n      throw createError(\"invalid character found: \" + char);\n    }\n\n    return carry += encodingIndex * Math.pow(ENCODING_LEN, index);\n  }, 0);\n\n  if (time > TIME_MAX) {\n    throw createError(\"malformed ulid, timestamp too large\");\n  }\n\n  return time;\n}\n\nfunction detectPrng() {\n  var allowInsecure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var root = arguments[1];\n\n  if (!root) {\n    root = typeof window !== \"undefined\" ? window : null;\n  }\n\n  var browserCrypto = root && (root.crypto || root.msCrypto);\n\n  if (browserCrypto) {\n    return function () {\n      var buffer = new Uint8Array(1);\n      browserCrypto.getRandomValues(buffer);\n      return buffer[0] / 0xff;\n    };\n  } else {\n    try {\n      var nodeCrypto = require(\"crypto\");\n\n      return function () {\n        return nodeCrypto.randomBytes(1).readUInt8() / 0xff;\n      };\n    } catch (e) {}\n  }\n\n  if (allowInsecure) {\n    try {\n      console.error(\"secure crypto unusable, falling back to insecure Math.random()!\");\n    } catch (e) {}\n\n    return function () {\n      return Math.random();\n    };\n  }\n\n  throw createError(\"secure crypto unusable, insecure Math.random not allowed\");\n}\n\nfunction factory(currPrng) {\n  if (!currPrng) {\n    currPrng = detectPrng();\n  }\n\n  return function ulid(seedTime) {\n    if (isNaN(seedTime)) {\n      seedTime = Date.now();\n    }\n\n    return encodeTime(seedTime, TIME_LEN) + encodeRandom(RANDOM_LEN, currPrng);\n  };\n}\n\nfunction monotonicFactory(currPrng) {\n  if (!currPrng) {\n    currPrng = detectPrng();\n  }\n\n  var lastTime = 0;\n  var lastRandom = void 0;\n  return function ulid(seedTime) {\n    if (isNaN(seedTime)) {\n      seedTime = Date.now();\n    }\n\n    if (seedTime <= lastTime) {\n      var incrementedRandom = lastRandom = incrementBase32(lastRandom);\n      return encodeTime(lastTime, TIME_LEN) + incrementedRandom;\n    }\n\n    lastTime = seedTime;\n    var newRandom = lastRandom = encodeRandom(RANDOM_LEN, currPrng);\n    return encodeTime(seedTime, TIME_LEN) + newRandom;\n  };\n}\n\nvar ulid = factory();\nexport { replaceCharAt, incrementBase32, randomChar, encodeTime, encodeRandom, decodeTime, detectPrng, factory, monotonicFactory, ulid };","import React from \"react\";\nimport { Box } from \"../components\";\nimport { Heading, Text, Button } from \"grommet\";\nimport { make as SchemaRender } from \"./PDT_SchemaRender.bs\";\nimport {\n  maugiao_layout,\n  maugiao_yupSchema,\n  maugiao_initialValues,\n  maugiao_ids,\n} from \"./PDT_Schema.bs\";\nimport { Formik, Form } from \"formik\";\nimport MountPortal from \"../MountPortal\";\nimport FormikAutosave from \"../FormikAutosave\";\nimport FormikNotify from \"../FormikNotify\";\n\nconst PDT_MaugiaoForm = ({ initialValues = maugiao_initialValues, onSave }) => (\n  <Formik\n    initialValues={initialValues}\n    onSubmit={(values, { setSubmitting }) => {\n      onSave(values, false).then(() => setSubmitting(false));\n    }}\n    validationSchema={maugiao_yupSchema}\n    validateOnBlur={true}\n    validateOnChange={false}\n  >\n    {({\n      values,\n      handleSubmit,\n      isSubmitting,\n      setFieldValue,\n      setFieldTouched,\n      isValidating,\n      errors,\n    }) => {\n      return (\n        <Form>\n          <SchemaRender\n            layout={maugiao_layout}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n          />\n          <FormikNotify\n            isValidating={isValidating}\n            errors={errors}\n            ids={maugiao_ids}\n          />\n          <MountPortal id=\"footerAction\">\n            <Box justifyContent=\"end\" direction=\"row\" alignItems=\"center\">\n              <FormikAutosave\n                values={values}\n                render={({ type }) => {\n                  switch (type) {\n                    case \"INITIAL\":\n                      return null;\n                    case \"SAVING\":\n                      return \"Đang lưu\";\n                    case \"SUCCESS\":\n                      return \"Đã lưu\";\n                    case \"ERROR\":\n                      return \"Có lỗi xảy ra khi lưu\";\n                  }\n                }}\n                onSave={value => onSave(value, true)}\n              />\n              <Button\n                primary\n                label=\"Kiểm tra\"\n                type=\"submit\"\n                size=\"small\"\n                className=\"font-bold\"\n                onClick={handleSubmit}\n                disabled={isSubmitting || isValidating}\n                color=\"white\"\n                margin={{ left: \"small\" }}\n              />\n            </Box>\n            {values.hoVaTen && <strong>{values.hoVaTen}</strong>}\n          </MountPortal>\n        </Form>\n      );\n    }}\n  </Formik>\n);\n\nconst PDT_Maugiao = ({ initialValues, onSave }) => {\n  return (\n    <div>\n      <Box direction=\"column\" alignItems=\"center\">\n        <Heading level={1} textAlign=\"center\">\n          Phiếu điều tra sức khỏe răng miệng\n        </Heading>\n        <Text size=\"large\" color=\"dark-1\">\n          (dành cho học sinh mẫu giáo)\n        </Text>\n      </Box>\n      <PDT_MaugiaoForm initialValues={initialValues} onSave={onSave} />\n    </div>\n  );\n};\n\nexport default PDT_Maugiao;\n","import React, { useState, useEffect } from \"react\";\nimport promiseRetry from \"promise-retry\";\nimport db from \"./db\";\nimport { Box, Select } from \"grommet\";\nimport * as Notify from \"./Notify\";\nimport PhieuDieuTra from \"./exam_form/PDT_Maugiao\";\n\nconst tabPhieuDieuTra = \"phieuDieuTra\";\n\nconst RecordInputMaugiao = ({ value }) => {\n  const [isDirty, setDirty] = useState(false);\n  const [doc, setDoc] = useState(value);\n\n  const handleSave = (value, autosave = false) => {\n    let tabValue = !autosave ? { ...value, complete: true } : value;\n    let newDoc = {\n      ...doc,\n      [tabPhieuDieuTra]: tabValue,\n    };\n    return promiseRetry((retry, number) => {\n      return db.put(newDoc).catch(response => {\n        if (response.status === 409) {\n          retry();\n        } else {\n          return response;\n        }\n      });\n    })\n      .then(response => {\n        setDoc({\n          ...doc,\n          _rev: response.rev,\n        });\n      })\n      .catch(err => {\n        Notify.error(\"Có lỗi xảy ra khi lưu\", \"Vui lòng thử lại\");\n        console.log(err);\n      });\n  };\n\n  return (\n    <Box fill>\n      <div\n        id=\"footerAction\"\n        className=\"bg-accent-4 m-0 py-2 px-5 flex justify-between items-center flex-row-reverse\"\n      />\n      <Box\n        fill\n        style={{ WebkitOverflowScrolling: \"touch\" }}\n        pad=\"medium\"\n        overflow=\"auto\"\n      >\n        <PhieuDieuTra\n          initialValues={doc[tabPhieuDieuTra]}\n          onSave={handleSave}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default RecordInputMaugiao;\n","import React from \"react\";\nimport RecordInputMaugiao from \"./RecordInputMaugiao\";\nimport ulid from \"./ulid\";\nimport { MAUGIAO } from \"./db\";\n\nconst RecordNewMaugiao = () => {\n  const id = ulid();\n  return (\n    <RecordInputMaugiao\n      key={id}\n      value={{\n        _id: id,\n        kind: MAUGIAO,\n      }}\n    />\n  );\n};\n\nexport default RecordNewMaugiao;\n"],"sourceRoot":""}